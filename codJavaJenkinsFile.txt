#!/usr/bin/env groovy

//variables
EXEC_ARGUMENTS = env.ARGUMENTS
DefaultMailSender = "PlatformTeam@temenos.com"
def DefaultMailReceiver = env.CONTACT_EMAIL
def PLATFORM_TYPE = env.PLATFORM_TYPE
def ATTACHMENT_PATTERN = env.ATTACHMENT_PATTERN

//methods
def send_email_with_artifacts(email_recipient, email_body, email_subject, attachPattern = "") {
    println "attachPattern: " + attachPattern

    if (!attachPattern.isEmpty()) {
        emailext mimeType: 'text/html', attachLog: false, body: email_body, subject: email_subject, to: email_recipient, from: DefaultMailSender, attachmentsPattern: attachPattern
    } else {
        emailext mimeType: 'text/html', attachLog: false, body: email_body, subject: email_subject, to: email_recipient, from: DefaultMailSender
    }
}

node('master'){
    println "Starting processing Groovy script"

    try
    {
        // Compiling the DemoApplication source from GitHub Master repository.
        stage('Checkout SCM') {
                deleteDir()
                println "checkout SCM source and build it"
                checkout scm
                dir("DemoApplication"){
                    withMaven(
                            maven: 'maven3.3.9',
                            jdk: 'JDK1.8') {

                            // Run the maven build
                            println "mvn clean install the source"
                            sh "mvn clean install"
                    }
                }
            }

        // Execute the DemoApplication
        stage('Build artifacts') {
                dir("DemoApplication") {
                    withMaven(maven: 'maven3.3.9',
                            jdk: 'JDK1.8') {

                            //Execute AzureRunner file from DemoApplication
                            println "Execute AzureRunner file from DemoApplication"
                            sh "mkdir -p output"
                            sh "mvn exec:java -Dexec.mainClass=\"com.example.demo.DemoApplication\" "
                    }
                }
            }
			
    } catch (err)
    {
        //Do something in case of err
        println "Error got in Groovy script"
        throw err
    }
    finally
    {
        println "Executing always finally"
    }

    println "Finish processing Groovy script"
}


